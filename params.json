{
  "name": "Flask-CQLAlchemy",
  "tagline": "Flask-CQLAlchemy handles connections to Cassandra clusters and gives a unified easier way to declare models and their columns",
  "body": "# Flask-CQLAlchemy\r\n\r\n[![Latest Version](https://img.shields.io/pypi/v/flask-cqlalchemy.svg)](https://pypi.python.org/pypi/Flask-CQLAlchemy)\r\n[![Build Status](https://travis-ci.org/thegeorgeous/flask-cqlalchemy.svg?branch=master)](https://travis-ci.org/thegeorgeous/flask-cqlalchemy)\r\n[![Python Versions](https://img.shields.io/pypi/pyversions/flask-cqlalchemy.svg)](https://pypi.python.org/pypi/Flask-CQLAlchemy)\r\n[![License](https://img.shields.io/pypi/l/Flask-CQLAlchemy.svg)](https://pypi.python.org/pypi/Flask-CQLAlchemy)\r\n[![Code Climate](https://codeclimate.com/github/thegeorgeous/flask-cqlalchemy/badges/gpa.svg)](https://codeclimate.com/github/thegeorgeous/flask-cqlalchemy)\r\n[![Downloads](https://img.shields.io/pypi/dm/flask-cqlalchemy.svg)](https://pypi.python.org/pypi/Flask-CQLAlchemy)\r\n\r\n\r\nFlask-CQLAlchemy handles connections to Cassandra clusters\r\nand gives a unified easier way to declare models and their\r\ncolumns\r\n\r\n**Now with support for abstract models and UserDefinedTypes**\r\n\r\n## Installation\r\n```shell\r\npip install flask-cqlalchemy\r\n```\r\n\r\n## Dependencies\r\nAs such Flask-CQLAlchemy depends only on the cassandra-driver. It is assumed\r\nthat you already have flask installed.\r\n\r\nFlask-CQLAlchemy has been tested with versions 2.6.0, 2.7.2, 3.0.0 and 3.1.0 of\r\ncassandra-driver. It is known to work with all versions >=2.5, but use it at\r\nyour own risk. All previous versions of Flask-CQLAlchemy are deprecated.\r\n\r\n## Example\r\n```python\r\n#example_app.py\r\nimport uuid\r\nfrom flask import Flask\r\nfrom flask.ext.cqlalchemy import CQLAlchemy\r\n\r\napp = Flask(__name__)\r\napp.config['CASSANDRA_HOSTS'] = ['127.0.0.1']\r\napp.config['CASSANDRA_KEYSPACE'] = \"cqlengine\"\r\ndb = CQLAlchemy(app)\r\n\r\n\r\nclass User(db.Model):\r\n    uid = db.columns.UUID(primary_key=True, default=uuid.uuid4)\r\n    username = db.columns.Text(required=False)\r\n```\r\n\r\n### User Defined Types\r\n\r\n```python\r\n#example_app_udt.py\r\nimport uuid\r\nfrom flask import Flask\r\nfrom flask_cqlalchemy import CQLAlchemy\r\n\r\napp = Flask(__name__)\r\napp.config['CASSANDRA_HOSTS'] = ['127.0.0.1']\r\napp.config['CASSANDRA_KEYSPACE'] = \"cqlengine\"\r\napp.config['CASSANDRA_SETUP_KWARGS'] = {'protocol_version': 3}\r\ndb = CQLAlchemy(app)\r\n\r\n\r\nclass address(db.UserType):\r\n    street = db.columns.Text()\r\n    zipcode = db.columns.Integer()\r\n\r\nclass users(db.Model):\r\n    __keyspace__ = 'cqlengine'\r\n    name = db.columns.Text(primary_key=True)\r\n    addr = db.columns.UserDefinedType(address)\r\n\r\n```\r\n\r\n## Usage\r\nStart a python shell\r\n```python\r\n>>>from example_app import db, User\r\n>>>db.sync_db()\r\n>>>user1 = User.create(username='John Doe')\r\n```\r\n### User Defined Types\r\n\r\n```python\r\n>>>from example_app_udt import db, address, users\r\n>>>db.sync_db()\r\n>>>user_address = address(street=\"Easy St.\", zipcode=99999\r\n>>> user\r\nusers(name=u'Joe', addr=<example_app_udt.address object at 0x7f4498063310>)\r\n>>> user.addr\r\n<example_app_udt.address object at 0x7f4498063310>\r\n>>> user.addr.street\r\nu'Easy St.'\r\n>>> user.addr.zipcode\r\n99999\r\n```\r\n\r\nFor a complete list of available methods refer to the cqlengine\r\n[Model documentation](http://datastax.github.io/python-driver/api/cassandra/cqlengine/models.html)\r\n\r\n## Configuration Options\r\nCQLAlchemy provides all the option available in the cqlengine connection.setup()\r\nmethod\r\n\r\n* `CASSANDRA_HOSTS` - A list of hosts\r\n* `CASSANDRA_KEYSPACE` - The default keyspace to use\r\n* `CASSANDRA_CONSISTENCY` - The global default ConsistencyLevel\r\n* `CASSANDRA_LAZY_CONNECT` - True if should not connect until first use\r\n* `CASSANDRA_RETRY_CONNECT` - True if we should retry to connect even if there was\r\n  a connection failure initially\r\n* `CASSANDRA_SETUP_KWARGS` - Pass-through keyword arguments for Cluster()\r\n\r\n## Beta Features\r\nFlask CQLAlchemy supports User Defined Types, provided you are using Cassandra\r\nversions 2.1 or above. However Travis only provides 2.0.9 for testing and so this\r\nfeature has not undergone rigorous testing.\r\n\r\n## Contributing\r\nFound a bug? Need a feature? Open it in issues, or even better, open a PR.\r\nPlease include tests in the PR.\r\n",
  "google": "UA-64053543-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}